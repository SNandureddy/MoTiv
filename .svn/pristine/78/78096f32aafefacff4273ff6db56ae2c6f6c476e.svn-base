//
//  U_HomeFilterVC.swift
//  MoTiv
//
//  Created by Deftsoft on 06/12/18.
//  Copyright Â© 2018 MoTiv. All rights reserved.
//

import UIKit
import MapKit
import SDWebImage

@objc protocol U_HomeFilterDelegate {
    @objc optional func setFilteredData(object:JSONDictionary)
}
class U_HomeFilterVC: BaseVC {
    // MARK: - IBOutlets
    
    @IBOutlet weak var locationLabel: UILabel!
    @IBOutlet weak var eventSearchLabel: UILabel!
    @IBOutlet weak var slider: UISlider!
    @IBOutlet weak var dateTextField: TextField!
    @IBOutlet weak var mainView: UIView!
    @IBOutlet weak var moodSongsView: UIView!
    @IBOutlet weak var moodSongViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var moodSongCollectionView: UICollectionView!
    @IBOutlet weak var moodSongSubCollectionView: UICollectionView!
    @IBOutlet weak var moodSubSongView: UIView!
    @IBOutlet weak var demandSongsView: UIView!
    @IBOutlet weak var demandCollectionView: UICollectionView!
    @IBOutlet weak var demandSongViewHeight: NSLayoutConstraint!
    @IBOutlet weak var demandSubSongView: UIView!
    @IBOutlet weak var demandSubCollectionView: UICollectionView!
    @IBOutlet weak var moodSubSongViewHeight: NSLayoutConstraint!
    @IBOutlet weak var demandSubSongViewHeight: NSLayoutConstraint!
    @IBOutlet var moodLabel: UILabel!
    @IBOutlet var demandLabel: UILabel!
    
    // MARK: - Variables
    var sliderValue: Int? = 0
    var userPublicCategoryArray = [Interest]()
    var userMusicCategoryArray = [Interest]()
    var selectedPublicCategoryArray = [Interest]()
    var selectedMusicCategoryArray = [Interest]()
    var currentLatitude : Double?
    var currentLongitude : Double?
    var filter : String? = "1"
    var delegate : U_HomeFilterDelegate?
    
    // MARK: - Class life cycle
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        pickerDelegate = self
        self.customizeUI()
        handleLocation()
        getPublicInterest()
    }
    override func viewWillDisappear(_ animated: Bool) {
        let selectedPublicArray = (selectedPublicCategoryArray.compactMap({$0.id})).map{String($0)}
        let selectedMusicArray = (selectedMusicCategoryArray.compactMap({$0.id})).map{String($0)}
        super.viewWillDisappear(true)
        sliderValue = Int(Double(slider.value).changeToInt) ?? 0
        let dict = [APIKeys.kFilter : filter ?? "", APIKeys.kLat : currentLatitude ?? 0.0, APIKeys.kLong : currentLongitude ?? 0.0, APIKeys.kMiles : sliderValue ?? 0, APIKeys.kPublicInterest : selectedPublicArray.joined(separator:","), APIKeys.kMusicInterest : selectedMusicArray.joined(separator:",")] as JSONDictionary
        delegate?.setFilteredData?(object: dict)
    }
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
    }
    
    
    // MARK: - Private functions
    private func customizeUI() {
        setTitle(title: kFilter)
        setBackButton(image: #imageLiteral(resourceName: "cross"))
        setRightButton(image: nil, title: kReset)
        setupSlider()
        let layout = moodSongSubCollectionView.collectionViewLayout as! UICollectionViewFlowLayout
        layout.minimumInteritemSpacing = 10
        moodSongSubCollectionView.layoutIfNeeded()
        dateTextField.set(radius: 14.0)
    }
    
    override func rightButtonAction(sender: UIButton) {
        filter = "0"
        slider.value = slider.minimumValue
        eventSearchLabel.text = "I'M LOOKING FOR AN EVENT WITHIN 0 MILES"
        dateTextField.text = ""
        dateTextField.resignFirstResponder()
        for interest in selectedPublicCategoryArray {
            userPublicCategoryArray.append(interest)
        }
        for interest in selectedMusicCategoryArray {
            userMusicCategoryArray.append(interest)
        }
        selectedPublicCategoryArray.removeAll()
        selectedMusicCategoryArray.removeAll()
        moodSongCollectionView.reloadData()
        moodSongSubCollectionView.reloadData()
        demandCollectionView.reloadData()
        demandSubCollectionView.reloadData()
    }
    
    private func handleAddress(coordinate: CLLocationCoordinate2D) {
        LocationManager.shared.getAddress(location: coordinate) { (address) in
            self.locationLabel.text = "MY LOCATION IS \(address)"
            self.currentLatitude = coordinate.latitude
            self.currentLongitude = coordinate.longitude
        }
    }
    
    private func handleLocation() {
        LocationManager.shared.askPermissionsAndFetchLocationWithCompletion { (location, placemark, error) in
            if error ==  nil {
                self.handleAddress(coordinate: location!.coordinate)
            }
        }
    }
    
    private func updateCollectionViewHeight() {
        demandSubCollectionView.isScrollEnabled = false
        moodSongSubCollectionView.isScrollEnabled = false
        let demandHeight = demandSubCollectionView.collectionViewLayout.collectionViewContentSize.height
        demandSubSongViewHeight.constant = demandHeight
        let moodSongHeight = moodSongSubCollectionView.collectionViewLayout.collectionViewContentSize.height
        moodSubSongViewHeight.constant = moodSongHeight
    }
    
    private func handleCategories() {
        for interest in DataManager.userPublicInterests {
            if let index = CommonVM.shared.publicArray.firstIndex(where: {$0.id == Int(interest)}) {
                userPublicCategoryArray.append( CommonVM.shared.publicArray[index])
            }
        }
        for interest in DataManager.userMusicInterests {
            if let index = CommonVM.shared.musicArray.firstIndex(where: {$0.id == Int(interest)}) {
                userMusicCategoryArray.append( CommonVM.shared.musicArray[index])
            }
        }
        if self.userPublicCategoryArray.count == 0 {
            self.moodSongsView.isHidden = true
            self.moodSubSongView.isHidden = true
            self.moodLabel.isHidden = true
        }
        if self.userMusicCategoryArray.count == 0 {
            self.demandLabel.isHidden = true
            self.demandSongsView.isHidden = true
            self.demandSubSongView.isHidden = true
        }
    }
    
    //MARK: - CUSTOMISE RADIUS SLIDER
    func setupSlider(){
        slider.minimumValue = 0
        slider.maximumValue = 100
        slider.setThumbImage(#imageLiteral(resourceName: "thumbImage"), for: .normal)
        slider.setThumbImage(#imageLiteral(resourceName: "thumbImage"), for: .highlighted)
        slider.setThumbImage(#imageLiteral(resourceName: "thumbImage"), for: .normal)
        slider.setThumbImage(#imageLiteral(resourceName: "thumbImage"), for: .highlighted)
    }
    
    // MARK: - IBActions
    @IBAction func sliderAction(_ sender: Any) {
        sliderValue = Int(Double(slider.value).changeToInt) ?? 0
        eventSearchLabel.text = "I'M LOOKING FOR AN EVENT WITHIN \(sliderValue ?? 0) MILES"
    }
    
    @IBAction func PreviousButtonAction(_ sender: Any) {
    }
    
    @IBAction func nextButtonAction(_ sender: Any) {
    }
    
    @IBAction func demandPreviousButtonAction(_ sender: Any) {
    }
    
    
    @IBAction func demandNextButtonAction(_ sender: Any) {
    }
    //MARK: TextField Actions
    @IBAction func textFieldDidChange(_ sender: UITextField) {
        dateTextField.text!.count > 0 ? dateTextField.setShadow(): dateTextField.removeShadow()
        dateTextField.text!.count > 0 ? dateTextField.addBackground(): dateTextField.removeBackground()
    }
    
}
//MARK: UICollectionView Delegates and Datasources
extension U_HomeFilterVC: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout{
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if collectionView == moodSongCollectionView{
            return selectedPublicCategoryArray.count
        }
        if collectionView == moodSongSubCollectionView{
            return userPublicCategoryArray.count
        }
        if collectionView == demandCollectionView{
            return selectedMusicCategoryArray.count
        }
        if collectionView == demandSubCollectionView{
            return userMusicCategoryArray.count
        }
        return 2
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: kSongAlbumCell, for: indexPath) as! SongAlbumCell
        if collectionView == moodSongSubCollectionView {
            cell.albumImageView.sd_setImage(with: userPublicCategoryArray[indexPath.row].image, placeholderImage: nil, options: .cacheMemoryOnly, completed: nil)
            cell.titleLabel.text = userPublicCategoryArray[indexPath.row].name
        } else if collectionView == demandSubCollectionView {
            cell.albumImageView.sd_setImage(with: userMusicCategoryArray[indexPath.row].image, placeholderImage: nil, options: .cacheMemoryOnly, completed: nil)
            cell.titleLabel.text = userMusicCategoryArray[indexPath.row].name
        } else if collectionView == moodSongCollectionView {
            cell.albumImageView.sd_setImage(with: selectedPublicCategoryArray[indexPath.row].image, placeholderImage: nil, options: .cacheMemoryOnly, completed: nil)
            cell.titleLabel.text = selectedPublicCategoryArray[indexPath.row].name
            cell.crossButton.addTarget(self, action: #selector(self.demandCrossButtonAction(sender:)), for: .touchUpInside)
            cell.crossButton.tag = indexPath.row
        } else if collectionView == demandCollectionView {
            cell.albumImageView.sd_setImage(with: selectedMusicCategoryArray[indexPath.row].image, placeholderImage: nil, options: .cacheMemoryOnly, completed: nil)
            cell.titleLabel.text = selectedMusicCategoryArray[indexPath.row].name
            cell.crossButton.addTarget(self, action: #selector(self.moodMusicCrossButtonAction(sender:)), for: .touchUpInside)
            cell.crossButton.tag = indexPath.row
        }
        return cell
    }
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        if collectionView == demandSubCollectionView || collectionView == moodSongSubCollectionView{
            return CGSize(width: 100, height: 90)
        }else{
            return CGSize(width: (collectionView.frame.width - 20)/2, height: 100)
        }
    }
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if collectionView == moodSongSubCollectionView {
            selectedPublicCategoryArray.append(userPublicCategoryArray[indexPath.row])
            userPublicCategoryArray.remove(at: indexPath.row)
            moodSongCollectionView.reloadData()
            moodSongSubCollectionView.reloadData()
        } else if collectionView == demandSubCollectionView {
            selectedMusicCategoryArray.append(userMusicCategoryArray[indexPath.row])
            userMusicCategoryArray.remove(at: indexPath.row)
            demandCollectionView.reloadData()
            demandSubCollectionView.reloadData()
        }
    }
    @objc func demandCrossButtonAction(sender: UIButton) {
        userPublicCategoryArray.append(selectedPublicCategoryArray[sender.tag])
        moodSongSubCollectionView.reloadData()
        selectedPublicCategoryArray.remove(at: sender.tag)
        moodSongCollectionView.reloadData()
    }
    
    @objc func moodMusicCrossButtonAction(sender: UIButton) {
        userMusicCategoryArray.append(selectedMusicCategoryArray[sender.tag])
        demandSubCollectionView.reloadData()
        selectedMusicCategoryArray.remove(at: sender.tag)
        demandCollectionView.reloadData()
    }
}
extension U_HomeFilterVC: UITextFieldDelegate {
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        textField.tintColor = UIColor.clear
        self.setDatePicker(textField: textField, mode: .date, maxdate: nil, date: nil, minDate: nil)
    }
}

//MARK: Custom Picker Delegates
extension U_HomeFilterVC: PickerDelegate {
    
    func didSelectDatePicker(date: Date) {
        dateTextField.text = date.stringFromDate(format: .longMDYDate, type: .local)
    }
}

//MARK: API methods
extension U_HomeFilterVC {
    
    func getPublicInterest() {
        CommonVM.shared.getPublicInterest { (message, error) in
            if error != nil {
                self.showErrorMessage(error: error)
            }
            else {
                self.getMusicInterest()
                self.handleCategories()
                self.moodSongSubCollectionView.reloadData()
                self.updateCollectionViewHeight()
            }
        }
    }
    
    func getMusicInterest() {
        CommonVM.shared.getMusicInterest { (message, error) in
            if error != nil {
                self.showErrorMessage(error: error)
            }
            else {
                self.demandSubCollectionView.reloadData()
                self.updateCollectionViewHeight()
            }
        }
    }
}
