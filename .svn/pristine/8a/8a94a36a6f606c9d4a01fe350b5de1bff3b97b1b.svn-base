//
//  O_HomeVC.swift
//  MoTiv
//
//  Created by IOS on 27/11/18.
//  Copyright © 2018 MoTiv. All rights reserved.
//

import UIKit
import SDWebImage

class O_HomeVC: BaseVC {
    
    //MARK: IBOutlets
    @IBOutlet weak var nowButton: UIButton!
    @IBOutlet weak var futureButton: UIButton!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var stackView: UIView!
    @IBOutlet weak var addButton: UIButton!
    
    //MARK: Variables
    var selectedTime: EventTime = .now
    var indexofPage:Int = 1

    //MARK: Class Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.customiseUI()
        getEventList()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        self.showPopover(title: kCreateMotivPop, sender: addButton)
    }

    //MARK: Private Methods
    private func customiseUI() {
        setTitle(title: kMyEvents)
        setLeftButton(image: #imageLiteral(resourceName: "search"))
        setRightButton(image: #imageLiteral(resourceName: "faq"))
        futureButton.backgroundColor = UIColor.clear
    }
    
    //MARK: - Private func
    func setData() -> JSONDictionary {
        var dict = JSONDictionary()
        dict[APIKeys.kEventTime] = selectedTime.rawValue
        dict[APIKeys.kPage] = indexofPage
        return dict
    }
    
    override func rightButtonAction(sender: UIButton) {
        let storybaord = UIStoryboard(storyboard: .Profile)
        let faqvc = storybaord.instantiateViewController(withIdentifier: kHelpVC) as! HelpVC
        let nav = UINavigationController(rootViewController: faqvc)
        self.navigationController?.present(nav, animated: true, completion: nil)
    }
    
    //MARK: IBActions
    @IBAction func eventTypeButtonAction(_ sender: UIButton) {
        sender.backgroundColor = UIColor.motivColor.darkBaseColor.color()
        if sender.tag == 1 { //NOW
            futureButton.backgroundColor = UIColor.clear
            self.selectedTime = .now
            EventVM.shared.eventDetailArray?.removeAll()
            self.tableView.reloadData()
            self.getEventList()
        }
        else { //FUTURE
            nowButton.backgroundColor = UIColor.clear
            self.selectedTime = .future
            EventVM.shared.eventDetailArray?.removeAll()
            self.tableView.reloadData()
            self.getEventList()
        }
    }
    
    @IBAction func createMoTivAction(_ sender: UIButton) {
        if !DataManager.isLoggedIn {
            self.showAlert(title: kLoginNow, message: kLoginAlert, okayTitle: kOkay) {
                self.logout()
            }
            return
        }
        let createvc = self.storyboard?.instantiateViewController(withIdentifier: kOCreateMainVC) as! O_CreateMainVC
        self.navigationController?.show(createvc, sender: self)
    }
}

//MARK: UITableview Datasource
extension O_HomeVC: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return EventVM.shared.eventDetailArray?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: kEventCell) as! EventCell
        cell.eventImage.sd_setImage(with: URL(string: EventVM.shared.eventDetailArray?[indexPath.row].eventImageURL ?? ""), placeholderImage: nil, options: .cacheMemoryOnly, completed: nil)
        cell.nameLabel.text = EventVM.shared.eventDetailArray?[indexPath.row].eventName
        cell.timeLabel.text = EventVM.shared.eventDetailArray?[indexPath.row].eventDate?.dateFromString(format: .time, type: .local).stringFromDate(format: .time, type: .local)
        cell.priceLabel.text = "£ \(EventVM.shared.eventDetailArray?[indexPath.row].ticketAmount ?? 0)"

        return cell
    }
}

//MARK: UItableview Delegates
extension O_HomeVC: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let detailvc = self.storyboard?.instantiateViewController(withIdentifier: kEventDetails) as! EventDetailVC
        detailvc.selectedIndex = indexPath.row
        self.navigationController?.show(detailvc, sender: self)
    }
}

//MARK: UIScrollViewDelegate
extension O_HomeVC {
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView)
    {
        if (tableView!.contentOffset.y + tableView!.frame.height) >= (tableView!.contentSize.height - 50) {
            if (EventVM.shared.eventDetailArray?.count ?? 0) > 0 {
                indexofPage = indexofPage + 1
                getEventList()
            }
        }
    }
}


//MARK: - API Calls
extension O_HomeVC {
    
    func getEventList(){
        if indexofPage == 1 {
            EventVM.shared.eventDetailArray?.removeAll()
            tableView.reloadData()
        }
        EventVM.shared.getEventList(dict: setData()){ (message, error) in
            if error != nil{
                self.indexofPage = self.indexofPage - 1
                self.showErrorMessage(error: error)
            } else{
                if self.indexofPage == (EventVM.shared.eventLastPage ?? 0) {
                    self.indexofPage = self.indexofPage - 1
                }
                EventVM.shared.eventDetailArray = EventVM.shared.eventDetailArray
                self.tableView.reloadData()
            }
        }
    }
}
