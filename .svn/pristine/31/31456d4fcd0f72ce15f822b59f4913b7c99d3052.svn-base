//
//  EventDetailVC.swift
//  MoTiv
//
//  Created by IOS on 27/11/18.
//  Copyright © 2018 MoTiv. All rights reserved.
//

enum EventDetailScreen {
    case main
    case invitation
    case past
    case ticket
}

import UIKit
import XLActionController
import SDWebImage


class EventDetailVC: BaseVC {
    
    //MARK: IBOutlets
    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var dateLabel: UILabel!
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var playButton: UIButton!
    @IBOutlet weak var favouriteButton: UIButton!
    @IBOutlet weak var timeLabel: UILabel!
    @IBOutlet weak var priceLabel: UILabel!
    @IBOutlet weak var locationButton: UIButton!
    @IBOutlet weak var attndingButton: UIButton!
    @IBOutlet weak var posButton: UIButton!
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var descriptionLabel: UILabel!
    @IBOutlet weak var scanButton: UIButton!
    @IBOutlet weak var ticketLeftLabel: UILabel!
    
    @IBOutlet weak var secondButton: UIButton!
    
    @IBOutlet weak var viewPostIcon: UIImageView!
    
    
    
    //MARK: Variables
    var index = 0
    var type: EventDetailScreen = .main
    var selectedIndex = Int()

    //MARK: Class Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        if type == .invitation {
            secondButton.isHidden = false
        }
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.customiseUI()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        self.showPopover(type: .down, title: kPlayPop, sender: playButton)
    }
    
    override func rightButtonAction(sender: UIButton) {
        let invitevc = self.storyboard?.instantiateViewController(withIdentifier: "InviteFriendVC") as! InviteUserVC
        invitevc.type = .friends
        self.navigationController?.show(invitevc, sender: self)
    }
    
    //MARK: Private Methods
    private func customiseUI() {
        setTitle(title: "", showBack: true)
        if BaseVC.userType == .organiser {
            setRightButton(image: #imageLiteral(resourceName: "editButton"))
        }
        else {
            setTwoRightButtons(image1: #imageLiteral(resourceName: "addChatUser"), image2: #imageLiteral(resourceName: "shareIconWhite"))
            ticketLeftLabel.isHidden = false
            scanButton.setTitle("BOOK NOW", for: .normal)
            locationButton.setTitle(EventVM.shared.eventDetailArray?[selectedIndex].eventLocation, for: .normal)
            attndingButton.setTitle("\(EventVM.shared.eventDetailArray?[selectedIndex].guestCount ?? 0) ATTENDING", for: .normal)
            self.imageView.sd_setImage(with: URL(string: EventVM.shared.eventDetailArray?[selectedIndex].eventImageURL ?? ""), placeholderImage: nil, options: .cacheMemoryOnly, completed: nil)
            self.nameLabel.text = EventVM.shared.eventDetailArray?[selectedIndex].eventName
            self.timeLabel.text = EventVM.shared.eventDetailArray?[selectedIndex].eventDate?.dateFromString(format: .time, type: .local).stringFromDate(format: .time, type: .local)
            self.dateLabel.text = EventVM.shared.eventDetailArray?[selectedIndex].eventDate?.dateFromString(format: .weekDate, type: .local).stringFromDate(format: .weekDate, type: .local)
            self.descriptionLabel.text = EventVM.shared.eventDetailArray?[selectedIndex].eventDescription
            self.priceLabel.text = "From £\(EventVM.shared.eventDetailArray?[selectedIndex].ticketAmount ?? 0)"
            self.ticketLeftLabel.text = "HURRY, ONLY \(EventVM.shared.eventDetailArray?[selectedIndex].ticketCount ?? 0) TICKETS LEFT"
        }
        if type == .invitation {
            secondButton.isHidden = false
            secondButton.set(radius: 14.0)
            secondButton.setBackgroundImage(scanButton.graidentImage, for: .normal)
            scanButton.setTitle("ACCEPT", for: .normal)
            secondButton.setTitle("REJECT", for: .normal)
            viewPostIcon.isHidden = true
            posButton.isHidden = true
            self.hideRightButton()
            ticketLeftLabel.isHidden = true
        }
        if type == .past || type == .ticket {
            self.hideRightButton()
            secondButton.isHidden = true
            scanButton.isHidden = true
            ticketLeftLabel.isHidden = true
        }
        
        locationButton.set(radius: 14.0, borderColor: UIColor.motivColor.baseColor.color(), borderWidth: 1.0)
        attndingButton.set(radius: 14.0, borderColor: UIColor.motivColor.baseColor.color(), borderWidth: 1.0)
        posButton.set(radius: 14.0, borderColor: UIColor.motivColor.baseColor.color(), borderWidth: 1.0)
        scanButton.set(radius: 14.0)
        scanButton.setBackgroundImage(scanButton.graidentImage, for: .normal)
    }
    
    //MARK: IBActions
    @IBAction func playButtonAction(_ sender: UIButton) {
    }
    
    @IBAction func favouriteButtonAction(_ sender: UIButton) {
        sender.isSelected = !sender.isSelected
    }
    
    @IBAction func locationButtonAction(_ sender: Any) {
        let locationvc = self.storyboard?.instantiateViewController(withIdentifier: kDirectionVC) as! DirectionVC
        locationvc.selectedIndex = self.selectedIndex
        self.navigationController?.show(locationvc, sender: self)
    }
    
    @IBAction func attendingButtonAction(_ sender: UIButton) {
        let attendingvc = self.storyboard?.instantiateViewController(withIdentifier: kUserListVC) as! UserListVC
        attendingvc.selectedIndex = self.selectedIndex
        self.navigationController?.show(attendingvc, sender: self)
    }
    
    @IBAction func postButtonAction(_ sender: Any) {
        let viewpostvc = self.storyboard?.instantiateViewController(withIdentifier: kViewPostVC) as! ViewPostVC
        viewpostvc.selectedIndex = self.selectedIndex

        self.navigationController?.show(viewpostvc, sender: self)
    }
    
    @IBAction func previousNextAction(_ sender: UIButton) {
        if sender.tag == 1 { //Previous
            if index > 0 {
                collectionView.scrollToItem(at: IndexPath(row: index-1, section: 0), at: .left, animated: true)
                index -= 1
            }
        }
        else { //Next
            if index < 9 {
                collectionView.scrollToItem(at: IndexPath(row: index+1, section: 0), at: .right, animated: true)
                index += 1
            }
        }
    }
    
    @IBAction func scanTicketAction(_ sender: UIButton) {
        if BaseVC.userType == .organiser {
            let scanvc = self.storyboard?.instantiateViewController(withIdentifier: kScanTicketVC) as! ScanTicketVC
            self.navigationController?.show(scanvc, sender: self)
        }
        else if type == .invitation {
            
        }
        else {
            let controller = SpotifyActionController()
            let action1 = Action(ActionData(title: "TICKET"), style: .default, handler: {action in
                let storyboard = UIStoryboard(storyboard: .Payment)
                let ticketvc = storyboard.instantiateViewController(withIdentifier: kSelectTicketVC) as! SelectTicketVC
                ticketvc.selectedIndex = self.selectedIndex
                self.navigationController?.show(ticketvc, sender: self)
            })
            let action2 = Action(ActionData(title: "GUESTLIST"), style: .default, handler: {action in
            })
            let action3 = Action(ActionData(title: "CANCEL"), style: .default, handler: {action in
                controller.dismiss()
            })
            controller.settings.cancelView.showCancel = false
            controller.addAction(action1)
            controller.addAction(action2)
            controller.addAction(action3)
            self.present(controller, animated: true, completion: nil)
        }
    }
}

//MARK: CollectionView Datasource
extension EventDetailVC: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 10
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: kCategoryCell, for: indexPath) as! CategoryCell
        return cell
    }
}

extension EventDetailVC: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: 90, height: collectionView.frame.height)
    }
    
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        let indexPaths = collectionView.indexPathsForVisibleItems
        index = indexPaths.first?.row ?? 0
    }
}
